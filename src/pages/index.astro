---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { Image } from  "astro:assets";
import Box from "../assets/box.png";
import Plus from "../assets/plus.png";

import "../styles/style.scss";
---

<style lang="scss">
.main-container {
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: #FBEFE0;
  overflow: hidden;
}

/* 入力フォーム：上部に固定 */
.input-form {
  position: sticky;
  top: 0;
  background: #FBEFE0;
  padding: 10px 20px;
  display: flex;
  justify-content: center;
  gap: 10px;
  z-index: 10;
  input {
    padding: 10px;
    font-size: 16px;
    width: 60%;
    background: #eee;
    border: none;
    border-radius: 4px;
  }
  button {
    background: #AE9890;
    color: white;
    border: none;
    padding: 10px 20px;
    font-weight: bold;
    border-radius: 6px;
    cursor: pointer;
  }
}

/* ToDoリスト */
.todo-list {
  flex-grow: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  padding-bottom: 100px;

  .todo-item {
    font-weight: bold;
    font-size: 18px;
    padding: 12px;
    border-bottom: 2px solid black;
    width: 80%;
    cursor: pointer;
    transition: background 0.3s;
  }

  .todo-item.selected {
    background: #f9bcbc;
  }
}

/* ボタンを画面下に固定 */
.btn-area {
  position: fixed;
  bottom: 20px;
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  gap: 40px;
  z-index: 100;

  img {
    width: 60px;
    height: 60px;
    background: #AE9890;
    border-radius: 50%;
    margin-bottom: 70px;
    padding: 10px;
    cursor: pointer;
  }
}
</style>

<Layout>
  <Header />
  <main class="main-container">
    <!-- 入力欄 -->
    <div class="input-form">
      <input type="text" id="todo-input" placeholder="やることを書く" />
      <button id="add-todo">追加</button>
    </div>

    <!-- ToDoリスト -->
    <div id="todo-list" class="todo-list"></div>

    <!-- 下部固定の操作ボタン -->
    <div class="btn-area">
      <Image src={Box} alt="削除" id="delete-button" />
      <Image src={Plus} alt="追加" id="add-button" />
    </div>
  </main>
  <Footer />

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const input = document.getElementById("todo-input");
      const addBtn = document.getElementById("add-todo");
      const plusBtn = document.getElementById("add-button");
      const deleteBtn = document.getElementById("delete-button");
      const list = document.getElementById("todo-list");

      let todos = JSON.parse(localStorage.getItem("todos") || "[]");

      // 初期表示
      todos.forEach(todo => createTodoItem(todo));

      // ToDo追加
      function addTodo(text) {
        const newTodo = {
          id: Date.now().toString(),  // ← id を文字列にして整合性保つ
          text
        };
        todos.unshift(newTodo);
        saveTodos();
        createTodoItem(newTodo, true);
      }

      // ToDo DOM生成
      function createTodoItem(todo, prepend = false) {
        const todoEl = document.createElement("div");
        todoEl.className = "todo-item";
        todoEl.textContent = todo.text;
        todoEl.dataset.id = todo.id;

        // ✅ 選択トグル処理（確認つき）
        todoEl.addEventListener("click", () => {
          const confirmed = confirm("完了しましたか？");
          if (confirmed) {
            todoEl.classList.toggle("selected");
          }
        });

        if (prepend) {
          list.prepend(todoEl);
        } else {
          list.appendChild(todoEl);
        }
      }

      // 入力欄の追加ボタン
      addBtn.addEventListener("click", () => {
        const text = input.value.trim();
        if (!text) return;
        addTodo(text);
        input.value = "";
      });

      // 下の追加ボタンで入力欄にフォーカス
      plusBtn.addEventListener("click", () => {
        input.focus();
      });

      // 削除処理（選択された要素のみ）
      deleteBtn.addEventListener("click", () => {
        const selectedEls = [...document.querySelectorAll(".todo-item.selected")];
        const selectedIds = selectedEls.map(el => el.dataset.id);
        if (selectedIds.length === 0) return;

        todos = todos.filter(todo => !selectedIds.includes(todo.id));
        selectedEls.forEach(el => el.remove());
        saveTodos();
      });

      // ローカルストレージ保存
      function saveTodos() {
        localStorage.setItem("todos", JSON.stringify(todos));
      }
    });
    
  </script>
</Layout>
