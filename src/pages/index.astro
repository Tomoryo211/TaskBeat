---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { Image } from "astro:assets";
import Box from "../assets/box.png";
import Plus from "../assets/plus.png";

import "../styles/style.scss";
---

<style lang="scss">
body {
  overflow: hidden;
}
.main-container {
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: #FBEFE0;
}

.input-form {
  position: sticky;
  top: 0;
  background: #FBEFE0;
  padding: 10px 20px;
  display: flex;
  justify-content: center;
  gap: 10px;
  z-index: 10;
  input {
    padding: 10px;
    font-size: 16px;
    width: 60%;
    background: #eee;
    border: none;
    border-radius: 4px;
  }
  button {
    background: #AE9890;
    color: white;
    border: none;
    padding: 10px 20px;
    font-weight: bold;
    border-radius: 6px;
    cursor: pointer;
  }
}

.todo-list {
  flex-grow: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  padding-bottom: 100px;

  .todo-item {
    font-weight: bold;
    font-size: 18px;
    padding: 12px;
    border-bottom: 2px solid black;
    width: 80%;
    cursor: pointer;
    transition: background 0.3s;
  }
  .todo-item.selected {
    background: #f9bcbc;
  }
}

.btn-area {
  position: fixed;
  bottom: 20px;
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  gap: 100px;
  z-index: 100;
  img {
    width: 60px;
    height: 60px;
    background: #AE9890;
    border-radius: 50%;
    margin-bottom: 70px;
    padding: 10px;
    cursor: pointer;
  }
}

/* „É¢„Éº„ÉÄ„É´ */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 999;
}
.modal-content {
  background: white;
  border-radius: 12px;
  padding: 30px;
  width: 80%;
  max-width: 400px;
  text-align: center;
  border: 2px solid black;
}
.modal h2 {
  font-size: 22px;
  font-weight: bold;
  margin-bottom: 15px;
}
.modal textarea {
  width: 90%;
  height: 120px;
  border: 1px solid black;
  margin-bottom: 20px;
}
.modal .buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 10px;
}
.modal button {
  background: #AE9890;
  color: white;
  border: none;
  padding: 10px 20px;
  font-weight: bold;
  border-radius: 6px;
  cursor: pointer;
}
</style>

<Layout>
  <Header />
  <main class="main-container">
    <!-- ÂÖ•Âäõ„Éï„Ç©„Éº„É† -->
    <div class="input-form">
      <input type="text" id="todo-input" placeholder="„ÇÑ„Çã„Åì„Å®„ÇíÊõ∏„Åè" />
      <button id="add-todo">ËøΩÂä†</button>
    </div>

    <!-- „Çø„Çπ„ÇØ‰∏ÄË¶ß -->
    <div id="todo-list" class="todo-list"></div>

    <!-- „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„Éú„Çø„É≥ -->
    <div class="btn-area">
      <Image src={Box} alt="ÂâäÈô§" id="delete-button" />
      <Image src={Plus} alt="ËøΩÂä†" id="add-button" />
    </div>

    <!-- üéµ Á¢∫Ë™ç„É¢„Éº„ÉÄ„É´ -->
    <div id="modal" class="modal">
      <div class="modal-content">
        <h2 id="modal-title"></h2>
        <hr />
        <label>„É°„É¢</label><br />
        <textarea id="modal-memo"></textarea>
        <p><strong>ÂÆåÊàê„Åó„Åæ„Åó„Åü„ÅãÔºü</strong></p>
        <div class="buttons">
          <button id="cancel-modal">Êàª„Çã</button>
          <button id="ok-modal">OK</button>
        </div>
      </div>
    </div>

    <!-- üéâ Êõ≤Áç≤Âæó„É¢„Éº„ÉÄ„É´ -->
    <div id="reward-modal" class="modal">
      <div class="modal-content">
        <h2>üéâ Áç≤Âæó„Åó„Åæ„Åó„ÅüÔºÅ</h2>
        <p id="reward-text" style="font-size:18px; font-weight:bold; margin:15px 0;"></p>
        <audio id="reward-audio" controls style="width:100%; margin-top:10px; display:none;"></audio>
        <div class="buttons" style="justify-content: center; margin-top:20px;">
          <button id="close-reward">OK</button>
        </div>
      </div>
    </div>
  </main>
  <Footer />

<script>
document.addEventListener("DOMContentLoaded", () => {
  const list = document.getElementById("todo-list");
  const input = document.getElementById("todo-input");
  const addBtn = document.getElementById("add-todo");

  const modal = document.getElementById("modal");
  const modalTitle = document.getElementById("modal-title");
  const modalMemo = document.getElementById("modal-memo");
  const okModal = document.getElementById("ok-modal");
  const cancelModal = document.getElementById("cancel-modal");

  const rewardModal = document.getElementById("reward-modal");
  const rewardText = document.getElementById("reward-text");
  const rewardAudio = document.getElementById("reward-audio");
  const closeReward = document.getElementById("close-reward");

  const deleteButton = document.getElementById("delete-button");

  let todos = JSON.parse(localStorage.getItem("todos") || "[]");
  let currentTarget = null;

  // ‚úÖ ÈÄöÁü•„ÅÆÊ®©Èôê„Çí„É™„ÇØ„Ç®„Çπ„Éà
  if ("Notification" in window && Notification.permission === "default") {
    Notification.requestPermission();
  }

  // TodoÁîüÊàê
  function createTodoItem(todo) {
    const todoEl = document.createElement("div");
    todoEl.className = "todo-item";
    todoEl.textContent = todo.text;
    todoEl.dataset.id = String(todo.id);

    todoEl.addEventListener("click", () => {
      document.querySelectorAll(".todo-item").forEach(el => el.classList.remove("selected"));
      todoEl.classList.add("selected");
      currentTarget = todoEl;

      modalTitle.textContent = todo.text;
      modalMemo.value = "";
      modal.style.display = "flex";
    });

    list.appendChild(todoEl);
  }

  function saveTodos() {
    localStorage.setItem("todos", JSON.stringify(todos));
  }

  list.innerHTML = "";
  todos.forEach(createTodoItem);

  // ËøΩÂä†Âá¶ÁêÜ
  addBtn.addEventListener("click", () => {
    const text = input.value.trim();
    if (!text) return;

    const newTodo = { id: Date.now().toString(), text };
    todos.push(newTodo);
    saveTodos();
    createTodoItem(newTodo);

    input.value = "";
  });

  // Êàª„Çã
  cancelModal.addEventListener("click", () => {
    modal.style.display = "none";
  });

  // ‚úÖ OK„ÇíÊäº„Åó„Åü„Çâ ‚Üí Êõ≤Áç≤Âæó„É¢„Éº„ÉÄ„É´ + ÈÄöÁü•
// ‚úÖ OK„ÇíÊäº„Åó„Åü„Çâ ‚Üí Êõ≤Áç≤Âæó„É¢„Éº„ÉÄ„É´ + ÈÄöÁü•
okModal.addEventListener("click", async () => {
  if (!currentTarget) return;

  try {
    const response = await fetch("http://localhost:8000/api/songs.php"); // ‚Üê PHP„Çµ„Éº„Éê„Éº
    if (!response.ok) throw new Error("API error");
    const data = await response.json();

    // üéµ ÈÄöÁü•
    if ("Notification" in window) {
      if (Notification.permission === "granted") {
        new Notification(`üéµ ${data.title} „ÇíÁç≤Âæó„Åó„Åæ„Åó„ÅüÔºÅ`);
      } else if (Notification.permission !== "denied") {
        const permission = await Notification.requestPermission();
        if (permission === "granted") {
          new Notification(`üéµ ${data.title} „ÇíÁç≤Âæó„Åó„Åæ„Åó„ÅüÔºÅ`);
        }
      }
    }

    // üéµ Áç≤Âæó„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    rewardText.textContent = `„Äå${data.title}„Äç„ÇíÁç≤Âæó„Åó„Åæ„Åó„ÅüÔºÅ`;

    if (data.url) {
      rewardAudio.src = data.url;
      rewardAudio.style.display = "block";
      try {
        await rewardAudio.play();
      } catch (err) {
        console.warn("Ëá™ÂãïÂÜçÁîüÂ§±Êïó:", err);
      }
    } else {
      rewardAudio.style.display = "none";
    }

    rewardModal.style.display = "flex";

  } catch (err) {
    console.error("„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó:", err);
  }

  // üéØ TodoÂâäÈô§
  const id = String(currentTarget.dataset.id);
  todos = todos.filter(todo => String(todo.id) !== id);
  saveTodos();
  currentTarget.remove();

  modal.style.display = "none";
});
closeReward.addEventListener("click", () => {
  rewardModal.style.display = "none";
});
});
</script>
