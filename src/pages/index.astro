---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { Image } from "astro:assets";
import Box from "../assets/box.png";
import Plus from "../assets/plus.png";

import "../styles/style.scss";
---

<style lang="scss">
.main-container {
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: #FBEFE0;
  overflow: hidden;
}

.input-form {
  position: sticky;
  top: 0;
  background: #FBEFE0;
  padding: 10px 20px;
  display: flex;
  justify-content: center;
  gap: 10px;
  z-index: 10;
  input {
    padding: 10px;
    font-size: 16px;
    width: 60%;
    background: #eee;
    border: none;
    border-radius: 4px;
  }
  button {
    background: #AE9890;
    color: white;
    border: none;
    padding: 10px 20px;
    font-weight: bold;
    border-radius: 6px;
    cursor: pointer;
  }
}

.todo-list {
  flex-grow: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  padding-bottom: 100px;

  .todo-item {
    font-weight: bold;
    font-size: 18px;
    padding: 12px;
    border-bottom: 2px solid black;
    width: 80%;
    cursor: pointer;
    transition: background 0.3s;
  }
  .todo-item.selected {
    background: #f9bcbc;
  }
}

.btn-area {
  position: fixed;
  bottom: 20px;
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  gap: 100px;
  z-index: 100;

  img {
    width: 60px;
    height: 60px;
    background: #AE9890;
    border-radius: 50%;
    margin-bottom: 70px;
    padding: 10px;
    cursor: pointer;
  }
}

/* モーダル */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
}
.modal-content {
  background: white;
  border-radius: 12px;
  padding: 30px;
  width: 80%;
  max-width: 400px;
  text-align: center;
  border: 2px solid black;
}
.modal h2 {
  font-size: 22px;
  font-weight: bold;
  margin-bottom: 15px;
}
.modal textarea {
  width: 90%;
  height: 120px;
  border: 1px solid black;
  margin-bottom: 20px;
}
.modal .buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 10px;
}
.modal button {
  background: #AE9890;
  color: white;
  border: none;
  padding: 10px 20px;
  font-weight: bold;
  border-radius: 6px;
  cursor: pointer;
}
</style>

<Layout>
  <Header />
  <main class="main-container">
    <div class="input-form">
      <input type="text" id="todo-input" placeholder="やることを書く" />
      <button id="add-todo">追加</button>
    </div>

    <div id="todo-list" class="todo-list"></div>

    <div class="btn-area">
      <Image src={Box} alt="削除" id="delete-button" />
      <Image src={Plus} alt="追加" id="add-button" />
    </div>

    <audio id="done-audio" src="/audio/syounan.mp3" preload="auto"></audio>

    <div id="modal" class="modal" style="display: none;">
      <div class="modal-content">
        <h2 id="modal-title"></h2>
        <hr />
        <label>メモ</label><br />
        <textarea id="modal-memo"></textarea>
        <p><strong>完成しましたか？</strong></p>
        <div class="buttons">
          <button id="cancel-modal">戻る</button>
          <button id="ok-modal">OK</button>
        </div>
      </div>
    </div>
  </main>
  <Footer />

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const input = document.getElementById("todo-input");
      const addBtn = document.getElementById("add-todo");
      const plusBtn = document.getElementById("add-button");
      const deleteBtn = document.getElementById("delete-button");
      const list = document.getElementById("todo-list");
      const doneAudio = document.getElementById("done-audio");

      const modal = document.getElementById("modal");
      const modalTitle = document.getElementById("modal-title");
      const modalMemo = document.getElementById("modal-memo");
      const okModal = document.getElementById("ok-modal");
      const cancelModal = document.getElementById("cancel-modal");

      let todos = JSON.parse(localStorage.getItem("todos") || "[]");
      let currentTarget = null;

      todos.forEach(todo => createTodoItem(todo));

      function addTodo(text) {
        const newTodo = { id: Date.now().toString(), text };
        todos.unshift(newTodo);
        saveTodos();
        createTodoItem(newTodo, true);
      }

      function createTodoItem(todo, prepend = false) {
        const todoEl = document.createElement("div");
        todoEl.className = "todo-item";
        todoEl.textContent = todo.text;
        todoEl.dataset.id = todo.id;

        todoEl.addEventListener("click", () => {
          currentTarget = todoEl;
          modalTitle.textContent = todo.text;
          modalMemo.value = "";
          modal.style.display = "flex";
        });

        if (prepend) {
          list.prepend(todoEl);
        } else {
          list.appendChild(todoEl);
        }
      }

      addBtn.addEventListener("click", () => {
        const text = input.value.trim();
        if (!text) return;
        addTodo(text);
        input.value = "";
      });

      plusBtn.addEventListener("click", () => {
        input.focus();
      });

      deleteBtn.addEventListener("click", () => {
        const selectedEls = [...document.querySelectorAll(".todo-item.selected")];
        const selectedIds = selectedEls.map(el => el.dataset.id);
        if (selectedIds.length === 0) return;

        todos = todos.filter(todo => !selectedIds.includes(todo.id));
        selectedEls.forEach(el => el.remove());
        saveTodos();
      });

      function saveTodos() {
        localStorage.setItem("todos", JSON.stringify(todos));
      }

      cancelModal.addEventListener("click", () => {
        modal.style.display = "none";
      });

      okModal.addEventListener("click", async () => {
        if (currentTarget) {
          currentTarget.classList.add("selected");
          doneAudio.play();

          try {
            const response = await fetch("/api/songs.php");
            if (!response.ok) throw new Error("API error");
            const data = await response.json();
            console.log("サーバーから取得したデータ:", data);
            // 必要に応じて data を使って処理を追加
          } catch (err) {
            console.error("データ取得に失敗:", err);
          }

          modal.style.display = "none";
        }
      });
    });
  </script>
</Layout>
